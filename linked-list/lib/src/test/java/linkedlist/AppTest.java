/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package linkedlist;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

class AppTest {


    //challenge 7
    @Test void kthTest(){
        LinkedList<Integer> ls=new LinkedList<>();
        assertEquals(null,ls.kth(0));
        //Where k and the size of the list are the same
        ls.append(1);
        assertEquals(null,ls.kth(5));
        //Where k is not a positive integer
        assertEquals(null,ls.kth(-1));
        //linked list is of a size 1
        assertEquals(1,ls.kth(1));

        ls.append(2);
        ls.append(3);
        ls.append(4);
        ls.append(5);
        assertEquals(3,ls.kth(2));



    }
    //challenge  5 & 6

    @Test void instantiateEmptyLinkedList(){
        LinkedList ls= new LinkedList();
        assertEquals(null,ls.head,"the head should be empty");
    }
    @Test void insertTest(){
        LinkedList<Integer> ls= new LinkedList<>();
        ls.insert(1);
        assertEquals(1,ls.size,"the linked list should have length equle to number of item we inserted");

    }
    @Test void appendTest(){
        LinkedList<Integer> ls= new LinkedList<Integer>();
        ls.insert(1);
        assertEquals(1,ls.size,"the linked list should have length equle to number of item we inserted");

    }
    @Test void appendMultiple(){
        LinkedList<Integer> ls = new LinkedList<Integer>();
        ls.insert(1);
        ls.insert(3);
        ls.insert(2);
        assertEquals(3,ls.size,"the linked list should have length equle to number of item we inserted");

    }
    @Test void insertBeforeTest(){
        LinkedList<Integer> ls = new LinkedList<>();
        ls.insert(1);
        ls.insert(3);
        ls.insert(2);
        ls.insertBefore(3,4);
        assertTrue(ls.includes(4) , "Return true if it finds the test element");

    }
    @Test void insertAfterTest(){
        LinkedList<Integer> ls = new LinkedList<>();
        ls.insert(1);
        ls.insert(3);
        ls.insert(2);
        ls.insertBefore(1,4);
        assertTrue(ls.includes(4) , "Return true if it finds the test element");

    }
    @Test void TestHead(){
        LinkedList<Integer> ls= new LinkedList<Integer>();
        ls.insert(1);
        ls.insert(2);
        ls.insert(3);
        assertEquals(3,ls.head.value,"the head sould be node 3");

    }
    @Test void insertMultiple(){
        LinkedList<Integer> ls = new LinkedList<>();
        ls.insert(1);
        ls.insert(3);
        ls.insert(2);
        assertEquals(3,ls.size,"the linked list should have length equle to number of item we inserted");

    }
    @Test void testIncludes(){
        LinkedList<Integer> ls = new LinkedList<Integer>();
        ls.insert(1);
        ls.insert(3);
        ls.insert(2);
        assertTrue(ls.includes(3), "number 3 is exists should return true");
        assertFalse(ls.includes(0), "number 0 is not exists should return false");

    }
    @Test void toStringTest(){
        LinkedList<Integer> ls = new LinkedList<Integer>();
        ls.insert(1);
        ls.insert(3);
        ls.insert(23);
        assertEquals("{ 1 } ->{ 3 } ->{ 23 } ->NULL",ls.toString(),"should return the list ");
    }

}


